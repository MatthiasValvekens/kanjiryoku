// this is not ideal, but I can't be arsed to deal with Gradle's declarative magic right now
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

description = 'zinnia-swig'
group = 'org.chasen.crfpp'
version = '0.06-JAVA'

apply plugin: 'java'

def javaHome = org.gradle.internal.jvm.Jvm.current().javaHome
def jniOut = "libjzinnia-${version}"

task runSwig(type: Exec) {
    doFirst {
        mkdir('build')
        mkdir('src/main/java/org/chasen/crfpp')
    }
    outputs.dirs 'build', 'src/main/java/org/chasen/crfpp'
    commandLine 'swig', '-c++', '-java',
      '-package', 'org.chasen.crfpp',
      '-Isrc/main/include', 
      '-o', 'build/ZinniaJNI.cpp', 
      '-outdir', 'src/main/java/org/chasen/crfpp',
      'src/main/swig/zinnia.i'
}

task compileBridgeObject(type: Exec, dependsOn: runSwig) {
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        commandLine 'g++', '-fPIC', '-Isrc/main/include', "-I${javaHome}/include", '-o', "build/${jniOut}.o", '-c', 'build/ZinniaJNI.cpp'
    } else if (DefaultNativePlatform.currentOperatingSystem.isLinux()) {
        commandLine 'g++', '-fPIC', '-Isrc/main/include', "-I${javaHome}/include", "-I${javaHome}/include/linux", '-o', "build/${jniOut}.o", '-c', 'build/ZinniaJNI.cpp'
    }
    outputs.file "build/${jniOut}.o"
}

task linkBridge(type: Exec) {
     dependsOn compileBridgeObject
     if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
         commandLine 'g++', '-fPIC', '-dynamiclib', "build/${jniOut}.o", '-o', "build/${jniOut}.dylib", 'libzinnia.dylib' 
         outputs.file "build/${jniOut}.dylib"
     } else if (DefaultNativePlatform.currentOperatingSystem.isLinux()) {
         commandLine 'g++', '-fPIC', '-shared', "build/${jniOut}.o", '-o', "build/${jniOut}.so", 'libzinnia.so.0' 
         outputs.file "build/${jniOut}.so"
     }
}

dependencies {
    if (DefaultNativePlatform.currentOperatingSystem.isMacOsX()) {
        compile files('libzinnia.dylib')
    } else if (DefaultNativePlatform.currentOperatingSystem.isLinux()) {
        compile files('libzinnia.so.0')
    }
}

compileJava {
    dependsOn runSwig, linkBridge
}
